Rush Hour 
Created by Charlie Anderson, Martha Durrett, Natasha Flowers,
& Brandon Hagans

Rush Hour is a game where you move vehicles around on a grid to try to get one particular vehicle out the exit. The original version of the game consists of a physical grid with plastic vehicles that are restricted to move only horizontally or vertically. Vehicles can't pass through other vehicles, or move off the grid. The vehicles are either trucks (which have a length of three grid squares) or cars (which have a length of two grid squares). The vehicles begin in a certain configuration on the board, and the player rearranges them to get the red car out the exit. Different configurations have different levels of difficulty. Our game has three pre-set configurations, each of different difficulty level. 

Our game consists of rectangles (that look like vehicles) on a grid. The user can click and drag them, but their movement is restricted such that the horizontal vehicles can only move horizontally and the vertical vehicles can only move vertically. In addition, while the user is dragging the vehicle, the game is checking for collisions with other vehicles and the outside of the grid. If a collision is detected, the vehicle is moved to where it was located just before the collision, which means it can't pass through other vehicles or the border. The game also checks to see if the red car has reached the far right side of the grid, where the exit is located, and if it has it pops up a "win" window and ends the game. 

To play the game, run the ViewIntroPage Java file. 

The only bug we are aware of is due to a what we believe is a JavaFX problem (based on threads from online forums), where if the user moves the mouse too quickly it can get ahead of the shape the user is dragging. In our game, the collisions with other cars or the side of the board are detected while the mouse is dragging, at which point the vehicle is stopped. When the mouse moves too fast, it gets ahead of the vehicle, and the mouse collides with the next thing while the vehicle is still farther behind. We have worked around this issue with our snap-to-grid capability, which makes sure to align the vehicle to the closest grid line once dragging has stopped. However, if a user moves the mouse really fast, it is possible for the vehicle to be so far behind the mouse that it actually gets snapped to a different grid line, rather than the one the mouse was closest to. 